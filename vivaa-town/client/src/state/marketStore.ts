import { create } from 'zustand';
import { v4 as uuidv4 } from 'uuid';
import type { MarketNews, MarketIndicators, StockPriceHistory } from '../schemas';
import { storageAdapter } from '../utils/storageAdapter';
import { STORAGE_KEYS } from '../storage/keys';

interface MarketState {
  marketNews: MarketNews[];
  marketIndicators: MarketIndicators[];
  stockPriceHistory: StockPriceHistory[];

  // Actions
  loadMarketNews: () => void;
  loadMarketIndicators: () => void;
  loadStockPriceHistory: () => void;

  createMarketNews: (data: Omit<MarketNews, 'id' | 'createdAt'>) => MarketNews;
  updateMarketNews: (id: string, updates: Partial<MarketNews>) => void;
  deleteMarketNews: (id: string) => void;

  createMarketIndicators: (data: Omit<MarketIndicators, 'id' | 'createdAt'>) => MarketIndicators;
  generateDailyIndicators: (classroomId: string) => MarketIndicators;

  addStockPriceHistory: (data: Omit<StockPriceHistory, 'id' | 'createdAt'>) => void;
  getStockPriceHistory: (stockId: string, days?: number) => StockPriceHistory[];

  // Market simulation
  generateRandomNews: (classroomId: string, availableStocks: string[]) => MarketNews[];
  getActiveNews: (classroomId: string) => MarketNews[];
  getTodayIndicators: (classroomId: string) => MarketIndicators | null;

  // Educational news templates
  createEducationalNews: (classroomId: string, type: string, stockIds: string[]) => MarketNews;
}

// ÍµêÏú°Ï†Å Îâ¥Ïä§ ÌÖúÌîåÎ¶øÎì§
const NEWS_TEMPLATES = {
  ÌôòÍ≤Ω: [
    {
      title: 'üå± Ïò§ÎäòÏùò ÎØ∏ÏÑ∏Î®ºÏßÄ ÎÜçÎèÑÍ∞Ä {value}„éç/„é•ÏûÖÎãàÎã§!',
      content: 'ÎØ∏ÏÑ∏Î®ºÏßÄ ÎÜçÎèÑÍ∞Ä {value}„éç/„é•Î°ú Ï∏°Ï†ïÎêòÏóàÏäµÎãàÎã§. ÌôòÍ≤Ω Í¥ÄÎ†® Í∏∞ÏóÖÎì§Ïùò Ï£ºÍ∞ÄÏóê ÏòÅÌñ•ÏùÑ Ï§Ñ Í≤ÉÏúºÎ°ú ÏòàÏÉÅÎê©ÎãàÎã§.',
      getImpact: (value: number) => value > 80 ? 'positive' : value > 40 ? 'neutral' : 'negative',
      getSeverity: (value: number) => Math.min(5, Math.max(1, Math.floor(value / 20)))
    },
    {
      title: '‚òî Í∞ïÏàòÎüâ {value}mmÎ°ú Î¨º Î∂ÄÏ°± Ìï¥Í≤∞!',
      content: 'Ïò§Îäò Í∞ïÏàòÎüâÏù¥ {value}mmÎ•º Í∏∞Î°ùÌïòÏó¨ Î¨º Î∂ÄÏ°± Î¨∏Ï†úÍ∞Ä ÏùºÎ∂Ä Ìï¥Í≤∞ÎêòÏóàÏäµÎãàÎã§.',
      getImpact: (value: number) => value > 10 ? 'positive' : 'neutral',
      getSeverity: (value: number) => Math.min(3, Math.max(1, Math.floor(value / 10)))
    }
  ],
  ÍµêÏú°: [
    {
      title: 'üìö ÏÑ†ÏÉùÎãò Í∏∞Î∂Ñ ÏßÄÏàò {value}Ï†ê!',
      content: 'Ïò§Îäò ÏÑ†ÏÉùÎãòÏùò Í∏∞Î∂Ñ ÏßÄÏàòÍ∞Ä {value}Ï†êÏûÖÎãàÎã§. ÍµêÏú° Í¥ÄÎ†® Í∏∞ÏóÖÎì§Ïùò ÏÑ±Í≥ºÏóê ÏòÅÌñ•ÏùÑ Ï§Ñ Í≤ÉÏúºÎ°ú Î≥¥ÏûÖÎãàÎã§.',
      getImpact: (value: number) => value > 7 ? 'positive' : value > 4 ? 'neutral' : 'negative',
      getSeverity: (value: number) => Math.abs(value - 5.5)
    },
    {
      title: 'üìù ÏãúÌóò Ïä§Ìä∏Î†àÏä§ ÏßÄÏàò {value}Ï†ê Í∏∞Î°ù',
      content: 'ÌïôÏÉùÎì§Ïùò ÏãúÌóò Ïä§Ìä∏Î†àÏä§Í∞Ä {value}Ï†êÏúºÎ°ú Ï∏°Ï†ïÎêòÏóàÏäµÎãàÎã§. ÍµêÏú°ÏóÖÍ≥Ñ ÎèôÌñ•Ïóê Ï£ºÎ™©Ìï¥Ïïº Ìï† ÏãúÏ†êÏûÖÎãàÎã§.',
      getImpact: (value: number) => value > 7 ? 'negative' : value < 4 ? 'positive' : 'neutral',
      getSeverity: (value: number) => Math.abs(value - 5)
    }
  ],
  Í∏∞Ïà†: [
    {
      title: 'üíª ÎîîÏßÄÌÑ∏ Ï∂úÏÑùÎ•† {value}% Îã¨ÏÑ±!',
      content: 'Ïò§Îäò ÌïôÏÉù Ï∂úÏÑùÎ•†Ïù¥ {value}%Î•º Í∏∞Î°ùÌñàÏäµÎãàÎã§. Í∏∞Ïà† Í∏∞ÏóÖÎì§Ïùò Ïã§Ï†ÅÏóê Í∏çÏ†ïÏ†Å ÏòÅÌñ•Ïù¥ ÏòàÏÉÅÎê©ÎãàÎã§.',
      getImpact: (value: number) => value > 90 ? 'positive' : value > 70 ? 'neutral' : 'negative',
      getSeverity: (value: number) => Math.abs(value - 85) / 20
    }
  ],
  ÏãùÌíà: [
    {
      title: 'üçé Í∏âÏãù ÎßåÏ°±ÎèÑ {value}Ï†ê Í∏∞Î°ù!',
      content: 'Ïò§Îäò Í∏âÏãù ÎßåÏ°±ÎèÑÍ∞Ä {value}Ï†êÏùÑ Í∏∞Î°ùÌñàÏäµÎãàÎã§. ÏãùÌíàÏóÖÍ≥ÑÏóê ÎØ∏ÏπòÎäî ÏòÅÌñ•ÏùÑ Î∂ÑÏÑùÌï¥Î≥¥ÏÑ∏Ïöî.',
      getImpact: (value: number) => value > 3.5 ? 'positive' : value > 2.5 ? 'neutral' : 'negative',
      getSeverity: (value: number) => Math.abs(value - 3) * 2
    }
  ],
  ÌäπÎ≥ÑÏù¥Î≤§Ìä∏: [
    {
      title: 'üéØ ÏÑ†ÏÉùÎãò Î™∏Î¨¥Í≤åÍ∞Ä {value}kgÏûÖÎãàÎã§!',
      content: 'ÏÑ†ÏÉùÎãòÏùò Í±¥Í∞ï Í¥ÄÎ¶¨ ÏÉÅÌÉúÍ∞Ä ÏãúÏû• Ïã¨Î¶¨Ïóê ÎØ∏ÏπòÎäî ÌäπÎ≥ÑÌïú ÏòÅÌñ•ÏùÑ Í¥ÄÏ∞∞Ìï¥Î≥¥ÏÑ∏Ïöî!',
      getImpact: () => Math.random() > 0.5 ? 'positive' : 'negative',
      getSeverity: () => Math.floor(Math.random() * 3) + 1
    },
    {
      title: 'üå°Ô∏è ÍµêÏã§ Ïò®ÎèÑ {value}¬∞C',
      content: 'Ïò§Îäò ÍµêÏã§ Ïò®ÎèÑÍ∞Ä {value}¬∞CÏûÖÎãàÎã§. ÏæåÏ†ÅÌïú ÌôòÍ≤ΩÏù¥ ÌïôÏäµÍ≥º Ìà¨Ïûê Ïã¨Î¶¨Ïóê ÎØ∏ÏπòÎäî ÏòÅÌñ•ÏùÑ ÏÇ¥Ìé¥Î≥¥ÏÑ∏Ïöî.',
      getImpact: (value: number) => (value >= 18 && value <= 26) ? 'positive' : 'negative',
      getSeverity: (value: number) => Math.abs(value - 22) / 5
    }
  ]
};

export const useMarketStore = create<MarketState>((set, get) => ({
  marketNews: [],
  marketIndicators: [],
  stockPriceHistory: [],

  loadMarketNews: () => {
    const stored = storageAdapter.get(STORAGE_KEYS.MARKET_NEWS);
    if (stored) {
      set({ marketNews: stored });
    }
  },

  loadMarketIndicators: () => {
    const stored = storageAdapter.get(STORAGE_KEYS.MARKET_INDICATORS);
    if (stored) {
      set({ marketIndicators: stored });
    }
  },

  loadStockPriceHistory: () => {
    const stored = storageAdapter.get(STORAGE_KEYS.STOCK_PRICE_HISTORY);
    if (stored) {
      set({ stockPriceHistory: stored });
    }
  },

  createMarketNews: (data) => {
    const now = new Date().toISOString();
    const newNews: MarketNews = {
      ...data,
      id: uuidv4(),
      createdAt: now,
    };

    set((state) => ({
      marketNews: [...state.marketNews, newNews]
    }));

    return newNews;
  },

  updateMarketNews: (id, updates) => {
    set((state) => ({
      marketNews: state.marketNews.map(news =>
        news.id === id ? { ...news, ...updates } : news
      )
    }));
  },

  deleteMarketNews: (id) => {
    set((state) => ({
      marketNews: state.marketNews.filter(news => news.id !== id)
    }));
  },

  createMarketIndicators: (data) => {
    const now = new Date().toISOString();
    const newIndicators: MarketIndicators = {
      ...data,
      id: uuidv4(),
      createdAt: now,
    };

    set((state) => ({
      marketIndicators: [...state.marketIndicators, newIndicators]
    }));

    return newIndicators;
  },

  generateDailyIndicators: (classroomId) => {
    const today = new Date().toISOString().split('T')[0];

    // Í∏∞Ï°¥Ïóê Ïò§Îäò ÏßÄÌëúÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
    const existingToday = get().marketIndicators.find(
      ind => ind.classroomId === classroomId && ind.date === today
    );

    if (existingToday) {
      return existingToday;
    }

    // ÏÉàÎ°úÏö¥ ÏùºÏùº ÏßÄÌëú ÏÉùÏÑ± (ÍµêÏú°Ï†ÅÏù¥Í≥† Ïû¨ÎØ∏ÏûàÎäî Í∞íÎì§)
    const indicators = {
      fineDust: Math.floor(Math.random() * 150) + 20, // 20-170 „éç/„é•
      temperature: Math.floor(Math.random() * 25) + 5, // 5-30¬∞C
      teacherMood: Math.floor(Math.random() * 10) + 1, // 1-10Ï†ê
      teacherWeight: Math.floor(Math.random() * 30) + 55, // 55-85kg
      rainfall: Math.floor(Math.random() * 50), // 0-50mm
      studentAttendance: Math.floor(Math.random() * 30) + 70, // 70-100%
      lunchMenuRating: Math.floor(Math.random() * 40) / 10 + 1, // 1.0-5.0Ï†ê
      examStress: Math.floor(Math.random() * 10) + 1, // 1-10Ï†ê
    };

    return get().createMarketIndicators({
      classroomId,
      date: today,
      indicators,
    });
  },

  addStockPriceHistory: (data) => {
    const now = new Date().toISOString();
    const newHistory: StockPriceHistory = {
      ...data,
      id: uuidv4(),
      createdAt: now,
    };

    set((state) => ({
      stockPriceHistory: [...state.stockPriceHistory, newHistory]
    }));
  },

  getStockPriceHistory: (stockId, days = 30) => {
    const history = get().stockPriceHistory
      .filter(h => h.stockId === stockId)
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .slice(0, days);

    return history.reverse(); // Ïò§ÎûòÎêú Í≤ÉÎ∂ÄÌÑ∞
  },

  generateRandomNews: (classroomId, availableStocks) => {
    const todayIndicators = get().getTodayIndicators(classroomId);
    if (!todayIndicators) return [];

    const news: MarketNews[] = [];
    const { indicators } = todayIndicators;

    // ÎØ∏ÏÑ∏Î®ºÏßÄ Îâ¥Ïä§
    if (Math.random() > 0.5) {
      const envStocks = availableStocks.filter(() => Math.random() > 0.7); // ÎûúÎç§ÌïòÍ≤å ÏùºÎ∂Ä ÌôòÍ≤ΩÏ£º ÏÑ†ÌÉù
      if (envStocks.length > 0) {
        news.push(get().createEducationalNews(classroomId, 'ÌôòÍ≤Ω', envStocks));
      }
    }

    // ÏÑ†ÏÉùÎãò Í∏∞Î∂Ñ Îâ¥Ïä§
    if (Math.random() > 0.6) {
      const eduStocks = availableStocks.filter(() => Math.random() > 0.7);
      if (eduStocks.length > 0) {
        news.push(get().createEducationalNews(classroomId, 'ÍµêÏú°', eduStocks));
      }
    }

    // Í∏âÏãù Îâ¥Ïä§
    if (Math.random() > 0.7) {
      const foodStocks = availableStocks.filter(() => Math.random() > 0.8);
      if (foodStocks.length > 0) {
        news.push(get().createEducationalNews(classroomId, 'ÏãùÌíà', foodStocks));
      }
    }

    return news;
  },

  getActiveNews: (classroomId) => {
    const now = new Date();
    return get().marketNews.filter(news =>
      news.classroomId === classroomId &&
      news.isActive &&
      (!news.expiresAt || new Date(news.expiresAt) > now)
    );
  },

  getTodayIndicators: (classroomId) => {
    const today = new Date().toISOString().split('T')[0];
    return get().marketIndicators.find(
      ind => ind.classroomId === classroomId && ind.date === today
    ) || null;
  },

  createEducationalNews: (classroomId, type, stockIds) => {
    const todayIndicators = get().getTodayIndicators(classroomId);
    if (!todayIndicators) {
      throw new Error('No indicators found for today');
    }

    const templates = NEWS_TEMPLATES[type as keyof typeof NEWS_TEMPLATES] || [];
    const template = templates[Math.floor(Math.random() * templates.length)];

    let value: number;
    switch (type) {
      case 'ÌôòÍ≤Ω':
        value = todayIndicators.indicators.fineDust;
        break;
      case 'ÍµêÏú°':
        value = todayIndicators.indicators.teacherMood;
        break;
      case 'Í∏∞Ïà†':
        value = todayIndicators.indicators.studentAttendance;
        break;
      case 'ÏãùÌíà':
        value = todayIndicators.indicators.lunchMenuRating;
        break;
      default:
        value = todayIndicators.indicators.teacherWeight || 70;
    }

    const title = template.title.replace('{value}', value.toString());
    const content = template.content.replace('{value}', value.toString());
    const impact = template.getImpact(value);
    const severity = Math.min(5, Math.max(1, Math.floor(template.getSeverity(value))));

    // 24ÏãúÍ∞Ñ ÌõÑ ÎßåÎ£å
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + 24);

    return get().createMarketNews({
      classroomId,
      title,
      content,
      type: type as any,
      impact,
      severity,
      affectedStocks: stockIds,
      isActive: true,
      expiresAt: expiresAt.toISOString(),
    });
  },
}));

// Auto-persist data on changes
useMarketStore.subscribe(
  (state) => state.marketNews,
  (marketNews) => {
    storageAdapter.set(STORAGE_KEYS.MARKET_NEWS, marketNews);
  }
);

useMarketStore.subscribe(
  (state) => state.marketIndicators,
  (marketIndicators) => {
    storageAdapter.set(STORAGE_KEYS.MARKET_INDICATORS, marketIndicators);
  }
);

useMarketStore.subscribe(
  (state) => state.stockPriceHistory,
  (stockPriceHistory) => {
    storageAdapter.set(STORAGE_KEYS.STOCK_PRICE_HISTORY, stockPriceHistory);
  }
);